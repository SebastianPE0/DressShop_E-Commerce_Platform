version: '3.8'

services:
  # Microservicio de Crear Empleados
  employee-create:
    build:
      context: ./BACKEND/autentication_sprintboot
    env_file:
      - ./BACKEND/autentication_sprintboot/.env
    ports:
      - "8090:8090"
    depends_on:
      mysql-db:
        condition: service_healthy  # Esperar hasta que MySQL est√© listo
    networks:
      - app-network

  # Microservicio de Leer Empleados
  employee-read:
    build:
      context: ./BACKEND/read_employee_web
    env_file:
      - ./BACKEND/autentication_sprintboot/.env
    ports:
      - "8094:8094"
    depends_on:
      mysql-db:
        condition: service_healthy
    networks:
      - app-network

  # Microservicio de Actualizar Empleados
  employee-update:
    build:
      context: ./BACKEND/springboot_update_employee
    env_file:
      - ./BACKEND/autentication_sprintboot/.env
    ports:
      - "8092:8092"
    depends_on:
      mysql-db:
        condition: service_healthy
    networks:
      - app-network

  # Microservicio de Eliminar Empleados
  employee-delete:
    build:
      context: ./BACKEND/delete_employee
    env_file:
      - ./BACKEND/autentication_sprintboot/.env  
    ports:
      - "8093:8093"
    depends_on:
      mysql-db:
        condition: service_healthy
    networks:
      - app-network

  # Base de Datos MySQL con healthcheck
  mysql-db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: alexander2198
      MYSQL_DATABASE: dboffice
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Frontend React
  frontend:
    build:
      context: ./FRONTEND/employee-app
    ports:
      - "5173:80"
    depends_on:
      - employee-create
      - employee-read
      - employee-update
      - employee-delete
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
