name: CI/CD Pipeline for ALL Microservices

on:
  push:
    branches:
      - Fix_Merged_Repository
    paths:
      - 'change_deploy_action/**'

jobs:
  
  build-and-push-addcart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME2 }}
          password: ${{ secrets.DOCKERHUB_PASSWORD2 }}

      - name: Build and push AddCart
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Cart/AddCart
          file: ./BackEnd/Domains/Cart/AddCart/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME2 }}/add-cart:v1

    # Deploy AddCart
  deploy-addcart:
    needs: build-and-push-addcart
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to AddCart on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_CARTSERVICE_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop add-cart || true
            sudo docker rm add-cart || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME2 }}/add-cart:v1
            sudo docker run -d --name add-cart -p 8001:8001 --restart unless-stopped \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              -e DB_NAME="cart_db" \
              -e CART_SERVICE_URL="http://${{ secrets.HOST_DNS_ADDCART_QA }}:8001/graphql" \  # ✅ Corrección aquí
              ${{ secrets.DOCKERHUB_USERNAME2 }}/add-cart:v1 

  # CATEGORIES
  build-and-push-create:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push create-category
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Categories/CreateCategory
          file: ./BackEnd/Domains/Categories/CreateCategory/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/create-category:latest

    # Deploy create-category
  deploy-create:
    needs: build-and-push-create
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to CreateCategory QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_CREATECATEGORY_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop create-category || true
            sudo docker rm create-category || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/create-category:latest
            sudo docker run -d --name create-category -p 5004:5004 \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/create-category:latest
              
  # Build and Push delete-category
  build-and-push-delete:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push delete-category
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Categories/DeleteCategory
          file: ./BackEnd/Domains/Categories/DeleteCategory/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/delete-category:latest

    # Deploy delete-category (Depende de GraphQL y GetProductsByCategory)
  deploy-delete-category:
    needs: build-and-push-delete
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to DeleteCategory QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_DELETECATEGORY_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop delete-category || true
            sudo docker rm delete-category || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/delete-category:latest
            sudo docker run -d --name delete-category -p 5000:5000 \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              -e GRAPHQL_SERVICE_URL="http://${{ secrets.HOST_DNS_GRAPHQL_QA }}/graphql" \
              -e PORT=5000 \
              ${{ secrets.DOCKERHUB_USERNAME }}/delete-category:latest
  

  # Build and Push get-all-categories
  build-and-push-getall:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push get-all-categories
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Categories/GetAllCategories
          file: ./BackEnd/Domains/Categories/GetAllCategories/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/get-all-categories:latest

    # Deploy get-all-categories
  deploy-getall:
    needs: build-and-push-getall
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GetAllCategories QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_GETALLCATEGORIES_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop get-all-categories || true
            sudo docker rm get-all-categories || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-all-categories:latest
            sudo docker run -d --name get-all-categories --network host \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-all-categories:latest


  # Build and Push get-byid-category
  build-and-push-getbyid:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push get-byid-category
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Categories/GetCategoryById
          file: ./BackEnd/Domains/Categories/GetCategoryById/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/get-byid-category:latest

    # Deploy get-byid-category
  deploy-getbyid:
    needs: build-and-push-getbyid
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GetByIdCategory QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_GETBYIDCATEGORY_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop get-byid-category || true
            sudo docker rm get-byid-category || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-byid-category:latest
            sudo docker run -d --name get-byid-category -p 3000:3000 \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-byid-category:latest

  # Build and Push update-category
  build-and-push-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push update-category
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Categories/UpdateCategory
          file: ./BackEnd/Domains/Categories/UpdateCategory/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/update-category:latest

    # Deploy update-category 
  deploy-update-category:
    needs: build-and-push-update
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to UpdateCategory QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_UPDATECATEGORY_QA  }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop update-category || true
            sudo docker rm update-category || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/update-category:latest
            sudo docker run -d --name update-category -p 3002:3002 \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/update-category:latest
  #======================================================================================= 
  #GRAPHQL
  #=======================================================================================         
  

  # Build and Push graphql-gateway
  build-and-push-graphql:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push graphql-gateway
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/GraphQL-Gateway
          file: ./BackEnd/Domains/GraphQL-Gateway/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/graphql-gateway:latest

    # Deploy graphql-gateway (Depende de GetProductsByCategory)
  deploy-graphql:
    needs: build-and-push-graphql
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GraphQL QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_GRAPHQL_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop graphql-gateway || true
            sudo docker rm graphql-gateway || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/graphql-gateway:latest
            sudo docker run -d --name graphql-gateway -p 4000:4000 \
              -e CATEGORY_SERVICE_URL="http://${{ secrets.HOST_DNS_GETBYIDCATEGORY_QA }}:3000/api/category" \
              -e PRODUCT_SERVICE_URL="http://${{ secrets.HOST_DNS_GETPRODUCTSBYCATEGORY_QA }}:3001/products/category" \
              -e PORT=4000\
              -e JWT_ISSUER="https://cognito-idp.us-east-1.amazonaws.com/us-east-1_JudMXeuR1" \
              -e JWKS_URI="https://cognito-idp.us-east-1.amazonaws.com/us-east-1_JudMXeuR1/.well-known/jwks.json" \
              ${{ secrets.DOCKERHUB_USERNAME }}/graphql-gateway:latest
  #=======================================================================================  
  # PRODUCTS
  #======================================================================================= 
  # Build and Push create-product
  build-and-push-createproduct:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push create-product
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Products/CreateProduct
          file: ./BackEnd/Domains/Products/CreateProduct/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/create-product:latest

    # Deploy create-product
  deploy-createproduct:
    needs: build-and-push-createproduct
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to CreateProduct QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_CREATEPRODUCT_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop create-product || true
            sudo docker rm create-product || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/create-product:latest
            sudo docker run -d --name create-product -p 6001:6001 \
              -e MONGO_URI="${{ secrets.MONGO_URI_PRODUCT }}" \
              -e GRAPHQL_URL="http://${{ secrets.HOST_DNS_GRAPHQL_QA }}/graphql" \
              -e PORT=6001 \
              -e DB_NAME:"product_db" \
              -e COGNITO_REGION="us-east-1" \
              -e COGNITO_USER_POOL_ID="us-east-1_JudMXeuR1" \
              ${{ secrets.DOCKERHUB_USERNAME }}/create-product:latest
   # Build and Push delete-product
  build-and-push-delete-p:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push delete-product
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Products/DeleteProduct
          file: ./BackEnd/Domains/Products/DeleteProduct/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/delete-product:latest

    # Deploy delete-product 
  deploy-delete-product:
    needs: build-and-push-delete-p
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to DeleteProduct QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_DELETEPRODUCT_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop delete-product || true
            sudo docker rm delete-product || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/delete-product:latest
            sudo docker run -d --name delete-product -p 6003:6003 \
              -e MONGO_URI="${{ secrets.MONGO_URI_PRODUCT }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/delete-product:latest
              
              
  # Build and Push get-all-products
  build-and-push-getall-p:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push get-all-products
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Products/GetProducts
          file: ./BackEnd/Domains/Products/GetProducts/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/get-all-products:latest

    # Deploy get-all-products
  deploy-getall-p:
    needs: build-and-push-getall-p
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GetAllProducts QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_GETALLPRODUCTS_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
            sudo docker stop get-all-products || true
            sudo docker rm get-all-products || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-all-products:latest
            sudo docker run -d --name get-all-products -p 6003:6003 \
              -e MONGO_URI="${{ secrets.MONGO_URI_PRODUCT }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-all-products:latest
    
  # Build and Push get-products-by-category
  build-and-push-get-products:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push get-products-by-category
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Products/GetProductsByCategory
          file: ./BackEnd/Domains/Products/GetProductsByCategory/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/get-products-by-category:latest

    # Deploy get-products-by-category
  deploy-get-products:
    needs: build-and-push-get-products
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GetProductsByCategory QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_GETPRODUCTSBYCATEGORY_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop get-products-by-category || true
            sudo docker rm get-products-by-category || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-products-by-category:latest
            sudo docker run -d --name get-products-by-category -p 3001:3001 \
              -e MONGO_URI="${{ secrets.MONGO_URI_PRODUCT }}" \
              -e MONGO_DBNAME="product_db" \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-products-by-category:latest
          

  # Build and Push get-products-by-id
  build-and-push-get-products-id:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push get-products-by-category
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Products/GetProductById
          file: ./BackEnd/Domains/Products/GetProductById/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/get-products-by-id:latest

    # Deploy get-products-by-id
  deploy-get-products-id:
    needs: build-and-push-get-products-id
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GetProductsById QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_GETPRODUCTBYID_QA }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop get-products-by-id || true
            sudo docker rm get-products-by-id || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-products-by-id:latest
            sudo docker run -d --name get-products-by-id -p 6002:6002 \
              -e MONGO_URI="${{ secrets.MONGO_URI_PRODUCT }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-products-by-id:latest

  # Build and Push update-product
  build-and-push-update-p:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push update-product
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Products/UpdateProduct
          file: ./BackEnd/Domains/Products/UpdateProduct/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/update-product:latest

    # Deploy update-product 
  deploy-update-product:
    needs: build-and-push-update-p
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to UpdateProduct QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_UPDATEPRODUCT_QA  }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker stop update-product || true
            sudo docker rm update-product || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/update-product:latest
            sudo docker run -d --name update-product --network host \
              -e MONGO_URI="${{ secrets.MONGO_URI_PRODUCT }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/update-product:latest
   
              
             
