name: CI/CD Pipeline for employee Services

on:
  push:
    branches:
       - Fix_Merge_Repository2

      
jobs:
  build-and-push-createEmployee:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21  # Asegura que sea la misma versión usada en el proyecto
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build JAR with Maven
        run: |
          cd BackEnd/Domains/Employees/CreateEmployee
          mvn clean package -DskipTests

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME2 }}
          password: ${{ secrets.DOCKERHUB_PASSWORD2 }}

      - name: Build and push create-employee
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Employees/CreateEmployee
          file: ./BackEnd/Domains/Employees/CreateEmployee/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME2 }}/create-employee:v1

  build-and-push-deleteEmployee:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 21  # Asegura que sea la misma versión usada en el proyecto
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build JAR with Maven
        run: |
          cd BackEnd/Domains/Employees/DeleteEmployee
          mvn clean package -DskipTests  
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME2 }}
          password: ${{ secrets.DOCKERHUB_PASSWORD2 }}

      - name: Build and push delete-employee
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Employees/DeleteEmployee
          file: ./BackEnd/Domains/Employees/DeleteEmployee/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME2 }}/delete-employee:v1
  build-and-push-getallEmployee:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21  # Asegura que sea la misma versión usada en el proyecto
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build JAR with Maven
        run: |
          cd BackEnd/Domains/Employees/GetAllEmployee
          mvn clean package -DskipTests
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME2 }}
          password: ${{ secrets.DOCKERHUB_PASSWORD2 }}

      - name: Build and push getall-employee
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Employees/GetAllEmployee
          file: ./BackEnd/Domains/Employees/GetAllEmployee/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME2 }}/getallemployee-employee:v1
  build-and-push-loginEmployee:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21  # Asegura que sea la misma versión usada en el proyecto
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build JAR with Maven
        run: |
          cd BackEnd/Domains/Employees/LoginEmployee
          mvn clean package -DskipTests
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME2 }}
          password: ${{ secrets.DOCKERHUB_PASSWORD2 }}

      - name: Build and push login-employee
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Employees/LoginEmployee
          file: ./BackEnd/Domains/Employees/LoginEmployee/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME2 }}/login-employee:v1
  build-and-push-updateEmployee:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21  # Asegura que sea la misma versión usada en el proyecto
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build JAR with Maven
        run: |
          cd BackEnd/Domains/Employees/UpdateEmployee
          mvn clean package -DskipTests
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME2 }}
          password: ${{ secrets.DOCKERHUB_PASSWORD2 }}

      - name: Build and push update-employee
        uses: docker/build-push-action@v4
        with:
          context: ./BackEnd/Domains/Employees/UpdateEmployee
          file: ./BackEnd/Domains/Employees/UpdateEmployee/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME2 }}/update-employee:v1
  build-and-push-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          if [ -d "FrontEnd/employee-app" ]; then
            cd FrontEnd/employee-app
            rm -rf node_modules package-lock.json # Limpieza previa
            npm install
          else
            echo "Error: El directorio FrontEnd/employee-app no existe"
            exit 1
          fi

      - name: Build frontend
        run: |
          if [ -d "FrontEnd/employee-app" ]; then
            cd FrontEnd/employee-app
            npm run build
          else
            echo "Error: El directorio FrontEnd/employee-app no existe"
            exit 1
          fi

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME2 }}
          password: ${{ secrets.DOCKERHUB_PASSWORD2 }}

      - name: Build and push frontend to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./FrontEnd/employee-app
          file: ./FrontEnd/employee-app/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME2 }}/frontend:v1
          build-args: |
            REACT_APP_BACKEND_URL_READ_CATEGORY=${{ secrets.HOST_DNS_GETALLCATEGORIES_QA }}
            REACT_APP_BACKEND_URL_CREATE_CATEGORY=${{ secrets.HOST_DNS_CREATECATEGORY_QA }}
            REACT_APP_BACKEND_URL_DELETE_CATEGORY=${{ secrets.HOST_DNS_DELETECATEGORY_QA }}
            REACT_APP_BACKEND_URL_UPDATE_CATEGORY=${{ secrets.HOST_DNS_UPDATECATEGORY_QA }}


  deploy-createEmployee:
    needs: build-and-push-createEmployee
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to createEmployee QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_CREATEEMPLOYEE_QA }}
          username: ${{ secrets.USERNAME2 }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
            sudo docker stop create-employee || true
            sudo docker rm create-employee || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME2 }}/create-employee:v1
            sudo docker run -d --name create-employee -p 8090:8090 \
              -e DB_URL="${{ secrets.DB_URL }}" \
             -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
             -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              ${{ secrets.DOCKERHUB_USERNAME2 }}/create-employee:v1 
  deploy-deleteEmployee:
    needs: build-and-push-deleteEmployee
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to deleteEmployee QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_DELETEEMPLOYEE_QA }}
          username: ${{ secrets.USERNAME2 }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
           sudo docker stop delete-employee || true
            sudo docker rm delete-employee || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME2 }}/delete-employee:v1
            sudo docker run -d --name delete-employee -p 8093:8093 \
             -e DB_URL="${{ secrets.DB_URL }}" \
             -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
             -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              ${{ secrets.DOCKERHUB_USERNAME2 }}/delete-employee:v1                   
  deploy-getallEmployee:
    needs: build-and-push-getallEmployee
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to getallEmployee QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_GETALLEMPLOYEE_QA }}
          username: ${{ secrets.USERNAME2 }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
           sudo docker stop getallemployee-employee || true
            sudo docker rm getallemployee-employee || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME2 }}/getallemployee-employee:v1
            sudo docker run -d --name getallemployee-employee -p 8094:8094 \
              -e DB_URL="${{ secrets.DB_URL }}" \
             -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
             -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              ${{ secrets.DOCKERHUB_USERNAME2 }}/getallemployee-employee:v1   
  deploy-loginEmployee:
    needs: build-and-push-loginEmployee
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to loginEmployee QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_LOGINEMPLOYEE_QA }}
          username: ${{ secrets.USERNAME2 }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
            sudo docker stop login-employee || true
            sudo docker rm login-employee || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME2 }}/login-employee:v1
            sudo docker run -d --name login-employee -p 8091:8091 \
              -e DB_URL="${{ secrets.DB_URL }}" \
             -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
             -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              ${{ secrets.DOCKERHUB_USERNAME2 }}/login-employee:v1 
  deploy-updateEmployee:
    needs: build-and-push-updateEmployee
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to updateEmployee QA
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_UPDATEEMPLOYEE_QA }}
          username: ${{ secrets.USERNAME2 }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
            sudo docker stop update-employee || true
            sudo docker rm update-employee || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME2 }}/update-employee:v1
            sudo docker run -d --name update-employee -p 8092:8092 \
              -e DB_URL="${{ secrets.DB_URL }}" \
             -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
             -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              ${{ secrets.DOCKERHUB_USERNAME2 }}/update-employee:v1 
  deploy-frontend:
    needs: build-and-push-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Install Docker if not present
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_FRONTEND }}
          username: ${{ secrets.USERNAME2 }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
            if ! command -v docker &> /dev/null; then
                echo "Docker no encontrado. Instalando..."
                sudo apt update
                sudo apt install -y docker.io
                sudo systemctl enable docker
                sudo systemctl start docker
                echo "Docker instalado correctamente."
            else
                echo "Docker ya está instalado."
            fi

      - name: Deploy Frontend to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_FRONTEND }}
          username: ${{ secrets.USERNAME2 }}
          key: ${{ secrets.EC2_SSH_KEY2 }}
          script: |
            # Verificar si Nginx está instalado antes de detenerlo
            if systemctl list-units --full -all | grep -q "nginx.service"; then
                sudo systemctl stop nginx
            else
                echo "Nginx no está instalado, continuando..."
            fi

            # Asegurar que Docker esté en ejecución y corregir permisos
            sudo systemctl start docker
            sudo chmod 666 /var/run/docker.sock

            # Detener y eliminar contenedor anterior si existe
            sudo docker stop frontend || true
            sudo docker rm frontend || true

            # Descargar la imagen desde DockerHub
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME2 }}/frontend:v1

            # Ejecutar el contenedor con variables de entorno
            sudo docker run -d --name frontend -p 80:80 \
              -e REACT_APP_BACKEND_URL_READ_CATEGORY=${{ secrets.HOST_DNS_GETALLCATEGORIES_QA }} \
              -e REACT_APP_BACKEND_URL_CREATE_CATEGORY=${{ secrets.HOST_DNS_CREATECATEGORY_QA }} \
              -e REACT_APP_BACKEND_URL_DELETE_CATEGORY=${{ secrets.HOST_DNS_DELETECATEGORY_QA }} \
              -e REACT_APP_BACKEND_URL_UPDATE_CATEGORY=${{ secrets.HOST_DNS_UPDATECATEGORY_QA }} \
              ${{ secrets.DOCKERHUB_USERNAME2 }}/frontend:v1
  

                                      

  
